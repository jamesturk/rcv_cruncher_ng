<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">C:\Users\User\Documents\fairvote\projects\rcv_cruncher\conda-env\Scripts\py-spy.exe record -o profile.svg --pid 17720</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="319.00"> </text><svg id="frames" x="10" width="1180"><g><title>update_marks (rcv_cruncher\marks.py:138) (97 samples, 0.34%)</title><rect x="0.1671%" y="276" width="0.3449%" height="15" fill="rgb(227,0,7)"/><text x="0.4171%" y="286.50"></text></g><g><title>copy (rcv_cruncher\marks.py:124) (121 samples, 0.43%)</title><rect x="0.1067%" y="244" width="0.4302%" height="15" fill="rgb(217,0,24)"/><text x="0.3567%" y="254.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:114) (110 samples, 0.39%)</title><rect x="0.1458%" y="260" width="0.3911%" height="15" fill="rgb(221,193,54)"/><text x="0.3958%" y="270.50"></text></g><g><title>_make_modified_cvr (base.py:155) (123 samples, 0.44%)</title><rect x="0.1067%" y="212" width="0.4373%" height="15" fill="rgb(248,212,6)"/><text x="0.3567%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (base.py:155) (123 samples, 0.44%)</title><rect x="0.1067%" y="228" width="0.4373%" height="15" fill="rgb(208,68,35)"/><text x="0.3567%" y="238.50"></text></g><g><title>combine_writein_marks (rcv_cruncher\marks.py:68) (35 samples, 0.12%)</title><rect x="0.9920%" y="244" width="0.1244%" height="15" fill="rgb(232,128,0)"/><text x="1.2420%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (rcv_cruncher\marks.py:68) (32 samples, 0.11%)</title><rect x="1.0026%" y="260" width="0.1138%" height="15" fill="rgb(207,160,47)"/><text x="1.2526%" y="270.50"></text></g><g><title>apply_rules (rcv_cruncher\marks.py:229) (86 samples, 0.31%)</title><rect x="0.9031%" y="228" width="0.3058%" height="15" fill="rgb(228,23,34)"/><text x="1.1531%" y="238.50"></text></g><g><title>remove_duplicate_candidate_marks (rcv_cruncher\marks.py:99) (142 samples, 0.50%)</title><rect x="1.4008%" y="244" width="0.5049%" height="15" fill="rgb(218,30,26)"/><text x="1.6508%" y="254.50"></text></g><g><title>apply_rules (rcv_cruncher\marks.py:232) (206 samples, 0.73%)</title><rect x="1.2088%" y="228" width="0.7324%" height="15" fill="rgb(220,122,19)"/><text x="1.4588%" y="238.50"></text></g><g><title>apply_rules (rcv_cruncher\marks.py:235) (57 samples, 0.20%)</title><rect x="1.9413%" y="228" width="0.2027%" height="15" fill="rgb(250,228,42)"/><text x="2.1913%" y="238.50"></text></g><g><title>apply_rules (rcv_cruncher\marks.py:238) (47 samples, 0.17%)</title><rect x="2.1510%" y="228" width="0.1671%" height="15" fill="rgb(240,193,28)"/><text x="2.4010%" y="238.50"></text></g><g><title>_reset_ballots (base.py:194) (627 samples, 2.23%)</title><rect x="0.1067%" y="180" width="2.2293%" height="15" fill="rgb(216,20,37)"/><text x="0.3567%" y="190.50">_..</text></g><g><title>get_cvr_dict (base.py:194) (627 samples, 2.23%)</title><rect x="0.1067%" y="196" width="2.2293%" height="15" fill="rgb(206,188,39)"/><text x="0.3567%" y="206.50">g..</text></g><g><title>_make_modified_cvr (base.py:159) (504 samples, 1.79%)</title><rect x="0.5440%" y="212" width="1.7919%" height="15" fill="rgb(217,207,13)"/><text x="0.7940%" y="222.50">_..</text></g><g><title>__init__ (base.py:113) (629 samples, 2.24%)</title><rect x="0.1067%" y="164" width="2.2364%" height="15" fill="rgb(231,73,38)"/><text x="0.3567%" y="174.50">_..</text></g><g><title>update_marks (rcv_cruncher\marks.py:137) (117 samples, 0.42%)</title><rect x="2.5528%" y="292" width="0.4160%" height="15" fill="rgb(225,20,46)"/><text x="2.8028%" y="302.50"></text></g><g><title>copy (rcv_cruncher\marks.py:124) (137 samples, 0.49%)</title><rect x="2.5101%" y="260" width="0.4871%" height="15" fill="rgb(210,31,41)"/><text x="2.7601%" y="270.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:114) (126 samples, 0.45%)</title><rect x="2.5492%" y="276" width="0.4480%" height="15" fill="rgb(221,200,47)"/><text x="2.7992%" y="286.50"></text></g><g><title>remove_mark (rcv_cruncher\marks.py:82) (148 samples, 0.53%)</title><rect x="2.4924%" y="244" width="0.5262%" height="15" fill="rgb(226,26,5)"/><text x="2.7424%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (base.py:334) (191 samples, 0.68%)</title><rect x="2.4639%" y="228" width="0.6791%" height="15" fill="rgb(249,33,26)"/><text x="2.7139%" y="238.50"></text></g><g><title>_tabulate (base.py:308) (201 samples, 0.71%)</title><rect x="2.4319%" y="196" width="0.7146%" height="15" fill="rgb(235,183,28)"/><text x="2.6819%" y="206.50"></text></g><g><title>_clean_round (base.py:332) (201 samples, 0.71%)</title><rect x="2.4319%" y="212" width="0.7146%" height="15" fill="rgb(221,5,38)"/><text x="2.6819%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (base.py:311) (38 samples, 0.14%)</title><rect x="3.1466%" y="212" width="0.1351%" height="15" fill="rgb(247,18,42)"/><text x="3.3966%" y="222.50"></text></g><g><title>_tabulate (base.py:311) (42 samples, 0.15%)</title><rect x="3.1466%" y="196" width="0.1493%" height="15" fill="rgb(241,131,45)"/><text x="3.3966%" y="206.50"></text></g><g><title>__init__ (base.py:131) (271 samples, 0.96%)</title><rect x="2.3430%" y="164" width="0.9635%" height="15" fill="rgb(249,31,29)"/><text x="2.5930%" y="174.50"></text></g><g><title>_run_contest (base.py:77) (271 samples, 0.96%)</title><rect x="2.3430%" y="180" width="0.9635%" height="15" fill="rgb(225,111,53)"/><text x="2.5930%" y="190.50"></text></g><g><title>_compute_contest_stat_table (stats.py:314) (30 samples, 0.11%)</title><rect x="3.3065%" y="180" width="0.1067%" height="15" fill="rgb(238,160,17)"/><text x="3.5565%" y="190.50"></text></g><g><title>__setitem__ (pandas\core\frame.py:3163) (30 samples, 0.11%)</title><rect x="3.3065%" y="196" width="0.1067%" height="15" fill="rgb(214,148,48)"/><text x="3.5565%" y="206.50"></text></g><g><title>__init__ (base.py:135) (69 samples, 0.25%)</title><rect x="3.3065%" y="164" width="0.2453%" height="15" fill="rgb(232,36,49)"/><text x="3.5565%" y="174.50"></text></g><g><title>_compute_summary_contest_stat_tables (stats.py:416) (49 samples, 0.17%)</title><rect x="3.7474%" y="180" width="0.1742%" height="15" fill="rgb(209,103,24)"/><text x="3.9974%" y="190.50"></text></g><g><title>_condorcet (stats.py:178) (38 samples, 0.14%)</title><rect x="3.7865%" y="196" width="0.1351%" height="15" fill="rgb(229,88,8)"/><text x="4.0365%" y="206.50"></text></g><g><title>__init__ (base.py:138) (112 samples, 0.40%)</title><rect x="3.5519%" y="164" width="0.3982%" height="15" fill="rgb(213,181,19)"/><text x="3.8019%" y="174.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:110) (29 samples, 0.10%)</title><rect x="3.9536%" y="228" width="0.1031%" height="15" fill="rgb(254,191,54)"/><text x="4.2036%" y="238.50"></text></g><g><title>update_marks (rcv_cruncher\marks.py:138) (34 samples, 0.12%)</title><rect x="4.0816%" y="244" width="0.1209%" height="15" fill="rgb(241,83,37)"/><text x="4.3316%" y="254.50"></text></g><g><title>_prepare_parsed_cvr (base.py:122) (74 samples, 0.26%)</title><rect x="3.9501%" y="196" width="0.2631%" height="15" fill="rgb(233,36,39)"/><text x="4.2001%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (base.py:122) (74 samples, 0.26%)</title><rect x="3.9501%" y="212" width="0.2631%" height="15" fill="rgb(226,3,54)"/><text x="4.2001%" y="222.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:114) (43 samples, 0.15%)</title><rect x="4.0603%" y="228" width="0.1529%" height="15" fill="rgb(245,192,40)"/><text x="4.3103%" y="238.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:269) (29 samples, 0.10%)</title><rect x="4.2274%" y="212" width="0.1031%" height="15" fill="rgb(238,167,29)"/><text x="4.4774%" y="222.50"></text></g><g><title>_select_from (pathlib.py:548) (43 samples, 0.15%)</title><rect x="4.4798%" y="244" width="0.1529%" height="15" fill="rgb(232,182,51)"/><text x="4.7298%" y="254.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:341) (103 samples, 0.37%)</title><rect x="4.4585%" y="212" width="0.3662%" height="15" fill="rgb(231,60,39)"/><text x="4.7085%" y="222.50"></text></g><g><title>glob (pathlib.py:1166) (99 samples, 0.35%)</title><rect x="4.4727%" y="228" width="0.3520%" height="15" fill="rgb(208,69,12)"/><text x="4.7227%" y="238.50"></text></g><g><title>__fspath__ (pathlib.py:742) (39 samples, 0.14%)</title><rect x="16.1772%" y="228" width="0.1387%" height="15" fill="rgb(235,93,37)"/><text x="16.4272%" y="238.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:342) (3,235 samples, 11.50%)</title><rect x="4.8247%" y="212" width="11.5018%" height="15" fill="rgb(213,116,39)"/><text x="5.0747%" y="222.50">dominion5_10 (rcv..</text></g><g><title>decode (codecs.py:322) (156 samples, 0.55%)</title><rect x="23.6685%" y="244" width="0.5546%" height="15" fill="rgb(222,207,29)"/><text x="23.9185%" y="254.50"></text></g><g><title>decode (json\decoder.py:337) (18,779 samples, 66.77%)</title><rect x="24.3014%" y="260" width="66.7674%" height="15" fill="rgb(206,96,30)"/><text x="24.5514%" y="270.50">decode (json\decoder.py:337)</text></g><g><title>raw_decode (json\decoder.py:353) (18,765 samples, 66.72%)</title><rect x="24.3511%" y="276" width="66.7176%" height="15" fill="rgb(218,138,4)"/><text x="24.6011%" y="286.50">raw_decode (json\decoder.py:353)</text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:343) (21,026 samples, 74.76%)</title><rect x="16.3265%" y="212" width="74.7565%" height="15" fill="rgb(250,191,14)"/><text x="16.5765%" y="222.50">dominion5_10 (rcv_cruncher\parsers.py:343)</text></g><g><title>load (json\__init__.py:293) (20,304 samples, 72.19%)</title><rect x="18.8936%" y="228" width="72.1894%" height="15" fill="rgb(239,60,40)"/><text x="19.1436%" y="238.50">load (json\__init__.py:293)</text></g><g><title>loads (json\__init__.py:346) (18,791 samples, 66.81%)</title><rect x="24.2729%" y="244" width="66.8101%" height="15" fill="rgb(206,27,48)"/><text x="24.5229%" y="254.50">loads (json\__init__.py:346)</text></g><g><title>_compile (re.py:291) (60 samples, 0.21%)</title><rect x="92.0038%" y="244" width="0.2133%" height="15" fill="rgb(225,35,8)"/><text x="92.2538%" y="254.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:346) (398 samples, 1.42%)</title><rect x="91.0830%" y="212" width="1.4151%" height="15" fill="rgb(250,213,24)"/><text x="91.3330%" y="222.50"></text></g><g><title>search (re.py:201) (334 samples, 1.19%)</title><rect x="91.3105%" y="228" width="1.1875%" height="15" fill="rgb(247,123,22)"/><text x="91.5605%" y="238.50"></text></g><g><title>_compile (re.py:294) (76 samples, 0.27%)</title><rect x="92.2278%" y="244" width="0.2702%" height="15" fill="rgb(231,138,38)"/><text x="92.4778%" y="254.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:348) (44 samples, 0.16%)</title><rect x="92.5052%" y="212" width="0.1564%" height="15" fill="rgb(231,145,46)"/><text x="92.7552%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:359) (35 samples, 0.12%)</title><rect x="92.8074%" y="212" width="0.1244%" height="15" fill="rgb(251,118,11)"/><text x="93.0574%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:365) (65 samples, 0.23%)</title><rect x="92.9994%" y="212" width="0.2311%" height="15" fill="rgb(217,147,25)"/><text x="93.2494%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:370) (32 samples, 0.11%)</title><rect x="93.3407%" y="212" width="0.1138%" height="15" fill="rgb(247,81,37)"/><text x="93.5907%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:376) (36 samples, 0.13%)</title><rect x="93.5398%" y="212" width="0.1280%" height="15" fill="rgb(209,12,38)"/><text x="93.7898%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:377) (41 samples, 0.15%)</title><rect x="93.6678%" y="212" width="0.1458%" height="15" fill="rgb(227,1,9)"/><text x="93.9178%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:378) (35 samples, 0.12%)</title><rect x="93.8136%" y="212" width="0.1244%" height="15" fill="rgb(248,47,43)"/><text x="94.0636%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:381) (63 samples, 0.22%)</title><rect x="93.9415%" y="212" width="0.2240%" height="15" fill="rgb(221,10,30)"/><text x="94.1915%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:382) (111 samples, 0.39%)</title><rect x="94.1655%" y="212" width="0.3947%" height="15" fill="rgb(210,229,1)"/><text x="94.4155%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:383) (191 samples, 0.68%)</title><rect x="94.5602%" y="212" width="0.6791%" height="15" fill="rgb(222,148,37)"/><text x="94.8102%" y="222.50"></text></g><g><title>dominion5_10 (rcv_cruncher\parsers.py:425) (86 samples, 0.31%)</title><rect x="95.4099%" y="212" width="0.3058%" height="15" fill="rgb(234,67,33)"/><text x="95.6599%" y="222.50"></text></g><g><title>__init__ (base.py:69) (25,814 samples, 91.78%)</title><rect x="3.9501%" y="180" width="91.7798%" height="15" fill="rgb(247,98,35)"/><text x="4.2001%" y="190.50">__init__ (base.py:69)</text></g><g><title>_prepare_parsed_cvr (base.py:98) (25,736 samples, 91.50%)</title><rect x="4.2274%" y="196" width="91.5025%" height="15" fill="rgb(247,138,52)"/><text x="4.4774%" y="206.50">_prepare_parsed_cvr (base.py:98)</text></g><g><title>update_marks (rcv_cruncher\marks.py:138) (41 samples, 0.15%)</title><rect x="95.8401%" y="292" width="0.1458%" height="15" fill="rgb(213,79,30)"/><text x="96.0901%" y="302.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:114) (58 samples, 0.21%)</title><rect x="95.8081%" y="276" width="0.2062%" height="15" fill="rgb(246,177,23)"/><text x="96.0581%" y="286.50"></text></g><g><title>copy (rcv_cruncher\marks.py:124) (64 samples, 0.23%)</title><rect x="95.7904%" y="260" width="0.2275%" height="15" fill="rgb(230,62,27)"/><text x="96.0404%" y="270.50"></text></g><g><title>_make_modified_cvr (base.py:155) (68 samples, 0.24%)</title><rect x="95.7797%" y="228" width="0.2418%" height="15" fill="rgb(216,154,8)"/><text x="96.0297%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (base.py:155) (68 samples, 0.24%)</title><rect x="95.7797%" y="244" width="0.2418%" height="15" fill="rgb(244,35,45)"/><text x="96.0297%" y="254.50"></text></g><g><title>apply_rules (rcv_cruncher\marks.py:217) (131 samples, 0.47%)</title><rect x="96.2206%" y="244" width="0.4658%" height="15" fill="rgb(251,115,12)"/><text x="96.4706%" y="254.50"></text></g><g><title>_compute_cvr_stat_table (stats.py:49) (285 samples, 1.01%)</title><rect x="95.7797%" y="196" width="1.0133%" height="15" fill="rgb(240,54,50)"/><text x="96.0297%" y="206.50"></text></g><g><title>get_cvr_dict (base.py:194) (285 samples, 1.01%)</title><rect x="95.7797%" y="212" width="1.0133%" height="15" fill="rgb(233,84,52)"/><text x="96.0297%" y="222.50"></text></g><g><title>_make_modified_cvr (base.py:159) (216 samples, 0.77%)</title><rect x="96.0250%" y="228" width="0.7680%" height="15" fill="rgb(207,117,47)"/><text x="96.2750%" y="238.50"></text></g><g><title>_compute_cvr_stat_table (stats.py:53) (34 samples, 0.12%)</title><rect x="96.8037%" y="196" width="0.1209%" height="15" fill="rgb(249,43,39)"/><text x="97.0537%" y="206.50"></text></g><g><title>__setitem__ (pandas\core\frame.py:3163) (34 samples, 0.12%)</title><rect x="96.8037%" y="212" width="0.1209%" height="15" fill="rgb(209,38,44)"/><text x="97.0537%" y="222.50"></text></g><g><title>update_marks (rcv_cruncher\marks.py:138) (136 samples, 0.48%)</title><rect x="96.9886%" y="276" width="0.4835%" height="15" fill="rgb(236,212,23)"/><text x="97.2386%" y="286.50"></text></g><g><title>copy (rcv_cruncher\marks.py:124) (144 samples, 0.51%)</title><rect x="96.9708%" y="244" width="0.5120%" height="15" fill="rgb(242,79,21)"/><text x="97.2208%" y="254.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:114) (140 samples, 0.50%)</title><rect x="96.9850%" y="260" width="0.4978%" height="15" fill="rgb(211,96,35)"/><text x="97.2350%" y="270.50"></text></g><g><title>remove_mark (rcv_cruncher\marks.py:82) (149 samples, 0.53%)</title><rect x="96.9672%" y="228" width="0.5298%" height="15" fill="rgb(253,215,40)"/><text x="97.2172%" y="238.50"></text></g><g><title>_compute_cvr_stat_table (stats.py:65) (175 samples, 0.62%)</title><rect x="96.9423%" y="196" width="0.6222%" height="15" fill="rgb(211,81,21)"/><text x="97.1923%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (stats.py:65) (175 samples, 0.62%)</title><rect x="96.9423%" y="212" width="0.6222%" height="15" fill="rgb(208,190,38)"/><text x="97.1923%" y="222.50"></text></g><g><title>update_marks (rcv_cruncher\marks.py:138) (128 samples, 0.46%)</title><rect x="97.7530%" y="276" width="0.4551%" height="15" fill="rgb(235,213,38)"/><text x="98.0030%" y="286.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:114) (135 samples, 0.48%)</title><rect x="97.7352%" y="260" width="0.4800%" height="15" fill="rgb(237,122,38)"/><text x="97.9852%" y="270.50"></text></g><g><title>copy (rcv_cruncher\marks.py:124) (141 samples, 0.50%)</title><rect x="97.7174%" y="244" width="0.5013%" height="15" fill="rgb(244,218,35)"/><text x="97.9674%" y="254.50"></text></g><g><title>remove_mark (rcv_cruncher\marks.py:82) (148 samples, 0.53%)</title><rect x="97.7067%" y="228" width="0.5262%" height="15" fill="rgb(240,68,47)"/><text x="97.9567%" y="238.50"></text></g><g><title>_compute_cvr_stat_table (stats.py:83) (175 samples, 0.62%)</title><rect x="97.6961%" y="196" width="0.6222%" height="15" fill="rgb(210,16,53)"/><text x="97.9461%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (stats.py:83) (175 samples, 0.62%)</title><rect x="97.6961%" y="212" width="0.6222%" height="15" fill="rgb(235,124,12)"/><text x="97.9461%" y="222.50"></text></g><g><title>_compute_cvr_stat_table (stats.py:85) (32 samples, 0.11%)</title><rect x="98.3183%" y="196" width="0.1138%" height="15" fill="rgb(224,169,11)"/><text x="98.5683%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (stats.py:85) (32 samples, 0.11%)</title><rect x="98.3183%" y="212" width="0.1138%" height="15" fill="rgb(250,166,2)"/><text x="98.5683%" y="222.50"></text></g><g><title>update_marks (rcv_cruncher\marks.py:138) (50 samples, 0.18%)</title><rect x="98.4818%" y="276" width="0.1778%" height="15" fill="rgb(242,216,29)"/><text x="98.7318%" y="286.50"></text></g><g><title>copy (rcv_cruncher\marks.py:124) (61 samples, 0.22%)</title><rect x="98.4605%" y="244" width="0.2169%" height="15" fill="rgb(230,116,27)"/><text x="98.7105%" y="254.50"></text></g><g><title>__init__ (rcv_cruncher\marks.py:114) (56 samples, 0.20%)</title><rect x="98.4783%" y="260" width="0.1991%" height="15" fill="rgb(228,99,48)"/><text x="98.7283%" y="270.50"></text></g><g><title>remove_mark (rcv_cruncher\marks.py:82) (66 samples, 0.23%)</title><rect x="98.4605%" y="228" width="0.2347%" height="15" fill="rgb(253,11,6)"/><text x="98.7105%" y="238.50"></text></g><g><title>_compute_cvr_stat_table (stats.py:97) (92 samples, 0.33%)</title><rect x="98.4427%" y="196" width="0.3271%" height="15" fill="rgb(247,143,39)"/><text x="98.6927%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (stats.py:97) (92 samples, 0.33%)</title><rect x="98.4427%" y="212" width="0.3271%" height="15" fill="rgb(236,97,10)"/><text x="98.6927%" y="222.50"></text></g><g><title>__init__ (base.py:83) (931 samples, 3.31%)</title><rect x="95.7299%" y="180" width="3.3101%" height="15" fill="rgb(233,208,19)"/><text x="95.9799%" y="190.50">__i..</text></g><g><title>_compute_cvr_stat_table (stats.py:99) (76 samples, 0.27%)</title><rect x="98.7698%" y="196" width="0.2702%" height="15" fill="rgb(216,164,2)"/><text x="99.0198%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (stats.py:99) (73 samples, 0.26%)</title><rect x="98.7805%" y="212" width="0.2595%" height="15" fill="rgb(220,129,5)"/><text x="99.0305%" y="222.50"></text></g><g><title>run_steps (rcv_cruncher\batch.py:410) (27,877 samples, 99.11%)</title><rect x="0.0071%" y="116" width="99.1147%" height="15" fill="rgb(242,17,10)"/><text x="0.2571%" y="126.50">run_steps (rcv_cruncher\batch.py:410)</text></g><g><title>new_rcv_contest (rcv_cruncher\batch.py:34) (27,854 samples, 99.03%)</title><rect x="0.0889%" y="132" width="99.0329%" height="15" fill="rgb(242,107,0)"/><text x="0.3389%" y="142.50">new_rcv_contest (rcv_cruncher\batch.py:34)</text></g><g><title>__init__ (variants.py:33) (27,854 samples, 99.03%)</title><rect x="0.0889%" y="148" width="99.0329%" height="15" fill="rgb(251,28,31)"/><text x="0.3389%" y="158.50">__init__ (variants.py:33)</text></g><g><title>__init__ (base.py:91) (26,768 samples, 95.17%)</title><rect x="3.9501%" y="164" width="95.1717%" height="15" fill="rgb(233,223,10)"/><text x="4.2001%" y="174.50">__init__ (base.py:91)</text></g><g><title>_rank_header_cvr (tables.py:35) (54 samples, 0.19%)</title><rect x="99.1289%" y="164" width="0.1920%" height="15" fill="rgb(215,21,27)"/><text x="99.3789%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (tables.py:35) (54 samples, 0.19%)</title><rect x="99.1289%" y="180" width="0.1920%" height="15" fill="rgb(232,23,21)"/><text x="99.3789%" y="190.50"></text></g><g><title>get_cvr_table (tables.py:19) (70 samples, 0.25%)</title><rect x="99.1289%" y="148" width="0.2489%" height="15" fill="rgb(244,5,23)"/><text x="99.3789%" y="158.50"></text></g><g><title>run_steps (rcv_cruncher\batch.py:413) (133 samples, 0.47%)</title><rect x="99.1218%" y="116" width="0.4729%" height="15" fill="rgb(226,81,46)"/><text x="99.3718%" y="126.50"></text></g><g><title>write_cvr_table (base.py:35) (131 samples, 0.47%)</title><rect x="99.1289%" y="132" width="0.4658%" height="15" fill="rgb(247,70,30)"/><text x="99.3789%" y="142.50"></text></g><g><title>to_csv (pandas\core\generic.py:3387) (61 samples, 0.22%)</title><rect x="99.3778%" y="148" width="0.2169%" height="15" fill="rgb(212,68,19)"/><text x="99.6278%" y="158.50"></text></g><g><title>to_csv (pandas\io\formats\format.py:1083) (61 samples, 0.22%)</title><rect x="99.3778%" y="164" width="0.2169%" height="15" fill="rgb(240,187,13)"/><text x="99.6278%" y="174.50"></text></g><g><title>save (pandas\io\formats\csvs.py:248) (61 samples, 0.22%)</title><rect x="99.3778%" y="180" width="0.2169%" height="15" fill="rgb(223,113,26)"/><text x="99.6278%" y="190.50"></text></g><g><title>_save (pandas\io\formats\csvs.py:253) (61 samples, 0.22%)</title><rect x="99.3778%" y="196" width="0.2169%" height="15" fill="rgb(206,192,2)"/><text x="99.6278%" y="206.50"></text></g><g><title>_save_body (pandas\io\formats\csvs.py:291) (61 samples, 0.22%)</title><rect x="99.3778%" y="212" width="0.2169%" height="15" fill="rgb(241,108,4)"/><text x="99.6278%" y="222.50"></text></g><g><title>_save_chunk (pandas\io\formats\csvs.py:302) (51 samples, 0.18%)</title><rect x="99.4134%" y="228" width="0.1813%" height="15" fill="rgb(247,173,49)"/><text x="99.6634%" y="238.50"></text></g><g><title>crunch_contest_set (rcv_cruncher\batch.py:678) (28,073 samples, 99.81%)</title><rect x="0.0000%" y="100" width="99.8116%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="110.50">crunch_contest_set (rcv_cruncher\batch.py:678)</text></g><g><title>run_steps (rcv_cruncher\batch.py:435) (47 samples, 0.17%)</title><rect x="99.6445%" y="116" width="0.1671%" height="15" fill="rgb(245,159,27)"/><text x="99.8945%" y="126.50"></text></g><g><title>close (tqdm\std.py:1299) (42 samples, 0.15%)</title><rect x="99.6622%" y="132" width="0.1493%" height="15" fill="rgb(245,172,44)"/><text x="99.9122%" y="142.50"></text></g><g><title>display (tqdm\std.py:1492) (42 samples, 0.15%)</title><rect x="99.6622%" y="148" width="0.1493%" height="15" fill="rgb(236,23,11)"/><text x="99.9122%" y="158.50"></text></g><g><title>all (28,126 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (rcv-cruncher-script.py:33) (28,126 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="78.50">&lt;module&gt; (rcv-cruncher-script.py:33)</text></g><g><title>main (rcv_cruncher\cli.py:56) (28,126 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="94.50">main (rcv_cruncher\cli.py:56)</text></g><g><title>crunch_contest_set (rcv_cruncher\batch.py:680) (53 samples, 0.19%)</title><rect x="99.8116%" y="100" width="0.1884%" height="15" fill="rgb(217,125,39)"/><text x="100.0616%" y="110.50"></text></g></svg></svg>